const{Network:e,NetworkStatus:t}=require("@modular/dmnc-core"),{ModularConfiguration:r}=require("@modular/config"),o=require("@modular/standard"),s=require("path"),n=require("level");class a{constructor(t,o={}){if(1!==arguments.length&&2!==arguments.length)throw new RangeError("ModularPlatform constructor expects one or two arguments");if(!(t instanceof r))throw new TypeError("Config must be a valid ModularConfiguration object");if("object"!=typeof o)throw new TypeError("Options must be a valid options object");this.config=r.new(t),this.dbPath=void 0===o.dbPath?s.join(__dirname,this.config.networkIdentifier,"db"):o.dbPath,this.debugLogger=void 0===o.debugLogger?()=>{}:o.debugLogger,this.network=new e(t,o),this.network.platform=this,this.network.registerHandler("SOCIAL",this.socialHandler),this.db={},this.db.users=n(s.join(this.dbPath,"users")),this.db.posts=n(s.join(this.dbPath,"posts"))}onReady(e){this.network.onReady(e)}initialize(){this.network.initialize()}useEndpoint(e){this.network.useEndpoint(e),this.network.setCoverage("0%1")}static async standard(){const e=await o.config();return new a(e)}verifiedQuery(e,t,r){return new Promise((o,s)=>{const n=[{layer:"SOCIAL",type:t,payload:r}],a=this.network.network.bestNodeCovering(e);this.network.peerQuery(a.endpoint,n).then(e=>{console.log(e)}).catch(e=>{console.error(e)})})}async socialHandler(r,o,s){if(3!==arguments.length)throw new RangeError("ModularPlatform.socialHandler() expects exactly three arguments");if("string"!=typeof r)throw new TypeError("First argument to ModularPlatform.socialHandler() must be an string");if("object"!=typeof o)throw new TypeError("Second argument to ModularPlatform.socialHandler() must be an object");if(!(s instanceof e))throw new TypeError("Third argument to ModularPlatform.socialHandler() must be a Network");switch(r){case"AHOY":return s.status===t.READY?Promise.resolve("AYE AYE"):Promise.reject(new Error("NO NO"));case"POST":return s.postHandler.bind(s.platform)(o.payload);default:throw new TypeError("SOCIAL handler cannot serve this request type")}}async postHandler(e){if(1!==arguments.length)throw new RangeError("ModularPlatform.postHandler() expects exactly one argument");if("object"!=typeof e)throw new TypeError("First argument to ModularPlatform.postHandler() must be an object");return this.dbPath}}module.exports.ModularPlatform=a,module.exports.ModularUser=class{constructor(e){this.platform=e}static register(e){}static login(e,t){}static other(e){}updateProfile(e){}verifySocial(e,t){}delete(){}follow(e){}unfollow(e){}block(e){}static hidePost(e){}},module.exports.ModularPost=class{constructor(e){this.author=e}setType(e){}setTitle(e){}setLink(e){}setBody(e){}setParent(e){}addModerator(e){}upload(){}},module.exports.ModularMessage=class{constructor(e,t){this.sender=e,this.recipient=t}setBody(e){}send(){}};