const{Network:e,NetworkStatus:r}=require("@modular/dmnc-core"),{ModularTrustRoot:t,ModularSource:o,ModularVerifier:i}=require("@modular/smcc-core"),{ModularConfiguration:s}=require("@modular/config"),a=require("@modular/standard"),n=require("level");class p{constructor(r,t={}){if(1!==arguments.length&&2!==arguments.length)throw new RangeError("ModularPlatform constructor expects one or two arguments");if(!(r instanceof s))throw new TypeError("Config must be a valid ModularConfiguration object");if("object"!=typeof t)throw new TypeError("Options must be a valid options object");this.config=s.new(r),this.network=new e(r,t),this.network.platform=this,this.debugLogger=this.network.debugLogger,this.network.registerHandler("SOCIAL",this.socialHandler),this.db={},this.db.users=n("users"),this.db.posts=n("posts"),this.bigM=BigInt(this.network.network.M)}onReady(e){this.network.onReady(e)}initialize(){this.network.initialize()}useEndpoint(e){this.network.useEndpoint(e)}setCoverage(e){this.network.setCoverage(e)}static async standard(){const e=await a.config();return new p(e)}propagate(e){if(!Array.isArray(e.reach))throw new TypeError("Request.reach must be an array");const r=e.mod,t=new Set(e.reach),o=this.network.network.nodesCovering(r).map(e=>e.endpoint).filter(e=>!t.has(e)),i=o.concat(e.reach);e.reach=i;const s=[];return o.forEach(r=>{const t=this.network.peerQuery(r,[e]);s.push(t)}),Promise.allSettled(s)}startPropagation(e,r,t){const o=BigInt("0x"+Buffer.from(e,"base64").toString("hex"))%this.bigM;return this.propagate({layer:"SOCIAL",type:r,payload:t,mod:Number(o),reach:[],propagate:!0})}socialHandler(r,t,o){return new Promise((i,s)=>{if(3!==arguments.length)throw new RangeError("ModularPlatform.socialHandler() expects exactly three arguments");if("string"!=typeof r)throw new TypeError("First argument to ModularPlatform.socialHandler() must be an string");if("object"!=typeof t)throw new TypeError("Second argument to ModularPlatform.socialHandler() must be an object");if(!(o instanceof e))throw new TypeError("Third argument to ModularPlatform.socialHandler() must be a Network");if("AHOY"!==r){if(!Number.isInteger(t.mod))throw new TypeError("Request.mod must be an integer");if(!0!==o.coverage.contains(t.mod))throw new RangeError("Node does not cover this mod. COVERAGE="+o.coverage.toString())}const a=["REGISTER","POST"];(function(e){switch(e){case"AHOY":return o.platform.ahoyHandler.bind(o.platform)();case"USER":return o.platform.fetchUser.bind(o.platform)(t);case"POSTS":return o.platform.fetchPosts.bind(o.platform)(t);case"REGISTER":return o.platform.registerHandler.bind(o.platform)(t);case"POST":return o.platform.postHandler.bind(o.platform)(t);default:throw new TypeError("SOCIAL handler cannot serve this request type")}})(r).then(e=>{!0===t.propagate&&a.includes(r)&&this.propagate(t),i(e)}).catch(e=>{s(e)})})}ahoyHandler(){return new Promise((e,t)=>{this.network.status===r.READY?e("AYE AYE"):t(new Error("NO NO"))})}static validateTimestamp(e){if(!Number.isInteger(e))throw new TypeError("Timestamp must be an integer");if(!(e<=Date.now()))throw new RangeError("Timestamp must be in the past");if(!(e>=Date.now()-6e4))throw new RangeError("Timestamp must be recent")}async postHandler(e){const r=e.payload;if("string"!=typeof r.user)throw new TypeError("Incomplete request payload (user).");if("string"!=typeof r.body)throw new TypeError("Incomplete request payload (body).");if(r.body.length>1024)throw new RangeError("Post body is too large.");if("string"!=typeof r.prev)throw new TypeError("Incomplete request payload (prev).");if("PROFILE"!==r.sig.type)throw new TypeError("Incomplete request payload (type).");if("string"!=typeof r.sig.body)throw new TypeError("Incomplete request payload (body).");if("string"!=typeof r.sig.signature)throw new TypeError("Incomplete request payload (signature).");p.validateTimestamp(r.timestamp),p.validateTimestamp(r.sig.timestamp);const o=BigInt("0x"+Buffer.from(r.user,"base64").toString("hex"))%this.bigM;if(Number(o)!==e.mod)throw new Error("User id does not match mod");const i=await this.loadUser(r.user);if(i.profile.HEAD!==r.prev)throw new Error("Head does not match provided; RECENCY="+i.profile.LASTUPDATED);if(i.profile.HEAD=t.blockHash(r.body,i.profile.HEAD),i.profile.LASTUPDATED=r.timestamp,!0!==await i.verifier.verifyUserProfileUpdate(r.sig.signature,r.sig.timestamp,i.profile))throw new Error("Could not verify profile update.");return i.signature=r.sig.signature,i.sigtime=r.sig.timestamp,i.posts.push({timestamp:r.timestamp,body:r.body,prev:r.prev}),await i.save(),"Saved post."}loadUser(e){return new Promise((r,t)=>{this.db.users.get(e,(o,s)=>{if(o)t(new Error("User does not exist."));else{const t=r(JSON.parse(s)),o=new d(this);o.type="OTHER",o.key=t.key,i.loadUser(t.key).then(i=>{o.verifier=i,o.id=o.verifier.id;const s=[];Object.entries(t.profile).forEach(e=>{const[r,t]=e;s[r]=t}),o.profile=s,this.db.posts.get(e,(e,t)=>{o.posts=e?[]:JSON.parse(t),r(o)})})}})})}async registerHandler(e){const r=e.payload;if("string"!=typeof r.key)throw new TypeError("Incomplete request payload (key).");if("string"!=typeof r.profileUpdate.user)throw new TypeError("Incomplete request payload (user).");if("PROFILE"!==r.profileUpdate.type)throw new TypeError("Incomplete request payload (type).");if("string"!=typeof r.profileUpdate.body)throw new TypeError("Incomplete request payload (body).");if("string"!=typeof r.profileUpdate.signature)throw new TypeError("Incomplete request payload (signature).");if("object"!=typeof r.profile)throw new TypeError("Incomplete request payload (profile).");if(!1!==await d.exists.bind(this)(r.profileUpdate.user))throw new Error("Already registered.");p.validateTimestamp(r.profileUpdate.timestamp);const t=await i.loadUser(r.key);if(t.id!==r.profileUpdate.user)throw new Error("UID does not match key.");if(BigInt("0x"+Buffer.from(t.id,"base64").toString("hex"))%this.bigM!==e.mod)throw new Error("UID does not match mod.");const o=[];if(Object.entries(r.profile).forEach(e=>{const[r,t]=e;o[r]=t}),!0!==await t.verifyUserProfileUpdate(r.profileUpdate.signature,r.profileUpdate.timestamp,o))throw new Error("Could not verify profile.");const s=new d(this);return s.key=r.key,s.id=t.id,s.profile=o,s.profile.LASTUPDATED=r.profileUpdate.timestamp,s.signature=r.profileUpdate.signature,s.sigtime=r.profileUpdate.timestamp,await s.save(),"Saved user."}fetchUser(e){const r=e.payload;return new Promise((t,o)=>{if("string"!=typeof r.id)throw new TypeError("User id must be a string");const i=BigInt("0x"+Buffer.from(r.id,"base64").toString("hex"))%this.bigM;if(Number(i)!==e.mod)throw new Error("User id does not match mod");this.db.users.get(r.id,(e,r)=>{e?o(new Error("User does not exist.")):t(JSON.parse(r))})})}fetchPosts(e){var r=256;Number.isInteger(e.max)&&e.max>0&&e.max<r&&(r=e.max);const t=e.payload;return new Promise((o,i)=>{if("string"!=typeof t.id)throw new TypeError("User id must be a string");const s=BigInt("0x"+Buffer.from(t.id,"base64").toString("hex"))%this.bigM;if(Number(s)!==e.mod)throw new Error("User id does not match mod");this.loadUser(t.id).then(e=>{const t=e.posts.slice(0,r);o({profile:Object.assign({},e.profile),posts:t,signature:e.signature,sigtime:e.sigtime})}).catch(e=>i(e))})}userList(e){return new Promise((e,r)=>{const t=[];this.db.users.createReadStream({limit:100}).on("data",e=>{t.push(JSON.parse(e.value))}).on("error",e=>{r(e)}).on("close",()=>{r(new Error("Stream error"))}).on("end",()=>{e(t)})})}async registerUser(e,r){const i=new d(this),s=await o.userRegistration(e,r);return i.id=s.source.id,e.HEAD=t.SHA256(i.id),e.LASTUPDATED=s.request.profileUpdate.timestamp,i.type="ME",i.source=s.source,i.key=s.privateKeyArmored,i.profile=e,i.posts=[],this.db.users.put("ME",i.id),s.request.profile=Object.assign({},e),i.signature=s.request.profileUpdate.signature,i.sigtime=s.request.profileUpdate.timestamp,i.save(),await this.startPropagation(i.id,"REGISTER",s.request),i}}class d{constructor(e){this.platform=e}static exists(e){return new Promise((r,t)=>{this.db.users.get(e,(e,t)=>{r(!e)})})}save(){return new Promise((e,r)=>{this.platform.db.posts.put(this.id,JSON.stringify(this.posts.slice(0,256)),t=>{t&&r(t),this.platform.db.users.put(this.id,JSON.stringify({id:this.id,key:this.key,profile:Object.assign({},this.profile),signature:this.signature,sigtime:this.sigtime}),t=>{t?r(t):e()})})})}async post(e){if("ME"!==this.type)throw new TypeError("Cannot post from this account");if("string"!=typeof e)throw new TypeError("Post body must be a string");if(e.length>1024)throw new RangeError("Post size is above maximum allowable");const r=this.profile.HEAD;this.profile.HEAD=t.blockHash(e,r);const o=Date.now();this.profile.LASTUPDATED=o;const i=await this.source.userProfileUpdate(this.profile);this.signature=i.signature,this.sigtime=i.timestamp,await this.platform.startPropagation(this.id,"POST",{user:this.id,timestamp:o,body:e,prev:r,sig:i}),await this.save()}static login(e,r){}static other(e){}follow(e){}updateProfile(e){}verifySocial(e,r){}unfollow(e){}delete(){}block(e){}unblock(e){}static hidePost(e){}}module.exports.ModularPlatform=p,module.exports.ModularUser=d;