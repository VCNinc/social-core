const{Network:e,NetworkStatus:r}=require("@modular/dmnc-core"),{ModularSource:t,ModularVerifier:o}=require("@modular/smcc-core"),{ModularConfiguration:s}=require("@modular/config"),i=require("@modular/standard"),a=require("level");class n{constructor(r,t={}){if(1!==arguments.length&&2!==arguments.length)throw new RangeError("ModularPlatform constructor expects one or two arguments");if(!(r instanceof s))throw new TypeError("Config must be a valid ModularConfiguration object");if("object"!=typeof t)throw new TypeError("Options must be a valid options object");this.config=s.new(r),this.network=new e(r,t),this.network.platform=this,this.debugLogger=this.network.debugLogger,this.network.registerHandler("SOCIAL",this.socialHandler),this.db={},this.db.users=a("users"),this.db.posts=a("posts"),this.bigM=BigInt(this.network.network.M)}onReady(e){this.network.onReady(e)}initialize(){this.network.initialize()}useEndpoint(e){this.network.useEndpoint(e)}setCoverage(e){this.network.setCoverage(e)}static async standard(){const e=await i.config();return new n(e)}propagate(e){if(!Array.isArray(e.reach))throw new TypeError("Request.reach must be an array");const r=e.mod,t=new Set(e.reach),o=this.network.network.nodesCovering(r).map(e=>e.endpoint).filter(e=>!t.has(e)),s=o.concat(e.reach);e.reach=s;const i=[];return o.forEach(r=>{const t=this.network.peerQuery(r,[e]);i.push(t)}),Promise.allSettled(i)}startPropagation(e,r,t){const o=BigInt("0x"+e)%this.bigM;return this.propagate({layer:"SOCIAL",type:r,payload:t,mod:Number(o),reach:[],propagate:!0})}socialHandler(r,t,o){return new Promise((s,i)=>{if(3!==arguments.length)throw new RangeError("ModularPlatform.socialHandler() expects exactly three arguments");if("string"!=typeof r)throw new TypeError("First argument to ModularPlatform.socialHandler() must be an string");if("object"!=typeof t)throw new TypeError("Second argument to ModularPlatform.socialHandler() must be an object");if(!(o instanceof e))throw new TypeError("Third argument to ModularPlatform.socialHandler() must be a Network");if(!Number.isInteger(t.mod))throw new TypeError("Request.mod must be an integer");if(!0!==o.coverage.contains(t.mod))throw new RangeError("Node does not cover this mod. COVERAGE="+o.coverage.toString());const a=["REGISTER"];(function(e){switch(e){case"AHOY":return o.platform.ahoyHandler.bind(o.platform)();case"USER":return o.platform.fetchUser.bind(o.platform)(t);case"REGISTER":return o.platform.registerHandler.bind(o.platform)(t);default:throw new TypeError("SOCIAL handler cannot serve this request type")}})(r).then(e=>{!0===t.propagate&&a.includes(r)&&this.propagate(t),s(e)}).catch(e=>{i(e)})})}ahoyHandler(){return new Promise((e,t)=>{this.network.status===r.READY?e("AYE AYE"):t(new Error("NO NO"))})}static validateTimestamp(e){if(!Number.isInteger(e))throw new TypeError("Timestamp must be an integer");if(!(e<=Date.now()))throw new RangeError("Timestamp must be in the past");if(!(e>=Date.now()-6e4))throw new RangeError("Timestamp must be recent")}async registerHandler(e){const r=e.payload;if("string"!=typeof r.key)throw new TypeError("Incomplete request payload (key).");if("string"!=typeof r.profileUpdate.user)throw new TypeError("Incomplete request payload (user).");if("PROFILE"!==r.profileUpdate.type)throw new TypeError("Incomplete request payload (type).");if("string"!=typeof r.profileUpdate.body)throw new TypeError("Incomplete request payload (body).");if("string"!=typeof r.profileUpdate.signature)throw new TypeError("Incomplete request payload (signature).");if("object"!=typeof r.profile)throw new TypeError("Incomplete request payload (profile).");if(!1!==await d.exists.bind(this)(r.profileUpdate.user))throw new Error("Already registered.");n.validateTimestamp(r.profileUpdate.timestamp);const t=await o.loadUser(r.key);if(t.id!==r.profileUpdate.user)throw new Error("UID does not match key.");if(BigInt("0x"+t.id)%this.bigM!==e.mod)throw new Error("UID does not match mod.");const s=[];if(Object.entries(r.profile).forEach(e=>{const[r,t]=e;s[r]=t}),!await t.verifyUserProfileUpdate(r.profileUpdate.signature,r.profileUpdate.timestamp,s))throw new Error("Could not verify profile.");const i=new d(this);return i.key=r.key,i.id=t.id,i.profile=Object.assign({},s),await i.save(),"Saved user."}fetchUser(e){const r=e.payload;return new Promise((t,o)=>{if("string"!=typeof r.id)throw new TypeError("User id must be a string");const s=BigInt("0x"+r.id)%this.bigM;if(Number(s)!==e.mod)throw new Error("User id does not match mod");this.db.users.get(r.id,(e,r)=>{e?o(new Error("User does not exist.")):t(JSON.parse(r))})})}async registerUser(e,r){const o=new d(this),s=await t.userRegistration(e,r);return o.type="ME",o.source=s.source,o.id=s.source.id,o.key=s.privateKeyArmored,o.profile=e,o.save(),this.db.users.put("ME",o.id),s.request.profile=Object.assign({},e),console.log(JSON.stringify(s.request)),await this.startPropagation(o.id,"REGISTER",s.request),o}}class d{constructor(e){this.platform=e}static exists(e){return new Promise((r,t)=>{this.db.users.get(e,(e,t)=>{r(!e)})})}toString(){return JSON.stringify({id:this.id,key:this.key,profile:this.profile})}save(){return new Promise((e,r)=>{this.platform.db.users.put(this.id,this.toString(),t=>{t?r(t):e()})})}static login(e,r){}static other(e){}follow(e){}updateProfile(e){}verifySocial(e,r){}unfollow(e){}delete(){}block(e){}unblock(e){}static hidePost(e){}}module.exports.ModularPlatform=n,module.exports.ModularUser=d,module.exports.ModularPost=class{constructor(e){this.author=e}setType(e){}setTitle(e){}setLink(e){}setBody(e){}setParent(e){}addModerator(e){}upload(){}},module.exports.ModularMessage=class{constructor(e,r){this.sender=e,this.recipient=r}setBody(e){this.body=e}send(){}};